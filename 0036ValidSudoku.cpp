/**
 * @file
 * @brief
 * @author MonkeyHe
 * @version  1.0
 * @date 2022-06-14
 * 2024-04-18
 * @tag
 * @similar
 */

/*



Example 1:
Input: board =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:
Input: board =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]

Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

*/




/*
 * @lc app=leetcode.cn id=36 lang=cpp
 *
 * [36] 有效的数独
 *
 * https://leetcode.cn/problems/valid-sudoku/description/
 *
 * algorithms
 * Medium (63.34%)
 * Likes:    1231
 * Dislikes: 0
 * Total Accepted:    433.3K
 * Total Submissions: 684K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 *
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 *
 *
 * 注意：
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 *
 *
 * 示例 1：
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 *
 *
 * 示例 2：
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在,
 * 因此这个数独是无效的。
 *
 *
 *
 * 提示：
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字（1-9）或者 '.'
 *
 *
 */


#include "stdio.h"
#include "stdlib.h"
#include "common.h"
#include <iostream>
#include <set>

using namespace std;

class Solution {
public:


    bool isValidSudoku(vector<vector<char>>& board) {
        vector< set<char> >  vertical(9, set<char>());
        vector< set<char> >  horizon(9, set<char>());
        vector< set<char> >  mini(9, set<char>());
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char v = board[i][j];
                if( v == '.') {
                    continue;
                }
                auto pv = vertical[i].insert(v);
                if (pv.second == false) { // means exist
                    return false;
                }
                auto ph = horizon[j].insert(v);
                if (ph.second == false) {
                    return false;
                }
                int k = 3*(i/3) + j/3;
                auto pm = mini[k].insert(v);
                if (pm.second == false) {
                    return false;
                }
            }
        }
        return true;
    }



    /// @brief M2
    /// @param board
    /// @return
    bool isValidSudoku(vector<vector<char>>& board) {
        int arr[30][9] = {{0}};
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char &v = board[i][j];
                if( v == '.') {
                    continue;
                }
                int val = v-'1'; // 1-> 0   9->8
                if (arr[i][val] != 0) {
                    return false;
                }
                arr[i][val] = 1;

                if (arr[10+j][val] != 0) {
                    return false;
                }
                arr[10+j][val] = 1;

                int cube = (j/3)*3 + (i/3);
                if (arr[20+cube][val] != 0) {
                    return false;
                }
                arr[20+cube][val] = 1;
            }
        }
        return true;
    }
};


int main() {
    Solution s;
    vector<vector<char> > d1 = {
        {'8','3','.','.','7','.','.','.','.'},
        {'6','.','.','1','9','5','.','.','.'},
        {'.','9','8','.','.','.','.','6','.'},
        {'8','.','.','.','6','.','.','.','3'},
        {'4','.','.','8','.','3','.','.','1'},
        {'7','.','.','.','2','.','.','.','6'},
        {'.','6','.','.','.','.','2','8','.'},
        {'.','.','.','4','1','9','.','.','5'},
        {'.','.','.','.','8','.','.','7','9'}
    };
    auto r1 = s.isValidSudoku(d1);
    cout << "r1=" << r1 <<endl;
}


/*
   Tips
   M1  就地模拟法 需要27个hashmap
   行 9个  列9个  小方块9个
   因为就1-9，9个数字，hashmap可用vector<int>或者 int[9]来代替

   M2 节省做法，使用一个二位数组 int arr[9][9]
   第一维  0-8 代表行
   10-18 代表列
   20-28 代表小方格

*/


